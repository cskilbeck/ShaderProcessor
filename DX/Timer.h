//////////////////////////////////////////////////////////////////////

#pragma once

//////////////////////////////////////////////////////////////////////

namespace DX
{
	struct Timer
	{
		//////////////////////////////////////////////////////////////////////

		Timer()
		{
			Reset();
		}

		//////////////////////////////////////////////////////////////////////

		static uint64 Frequency()
		{
			uint64 frequency;
			QueryPerformanceFrequency((LARGE_INTEGER *)&frequency);
			return frequency;
		}

		//////////////////////////////////////////////////////////////////////

		static uint64 Ticks()
		{
			uint64 time;
			QueryPerformanceCounter((LARGE_INTEGER *)&time);
			return time;
		}

		//////////////////////////////////////////////////////////////////////

		void Reset()
		{
			mPaused = false;
			mCurrentTicks = 0;
			mDeltaTicks = 0;
			mOldDeltaTicks = 0;
			mOldTicks = Ticks();
		}

		//////////////////////////////////////////////////////////////////////

		void Pause()
		{
			if(!mPaused)
			{
				mPaused = true;
				mOldTicks = Ticks();
			}
		}

		//////////////////////////////////////////////////////////////////////

		void UnPause()
		{
			mPaused = false;
			mDeltaTicks = mOldDeltaTicks;
			mOldTicks = Ticks();
		}

		//////////////////////////////////////////////////////////////////////

		bool Paused() const
		{
			return mPaused;
		}

		//////////////////////////////////////////////////////////////////////

		void Update()
		{
			uint64 ticks = Ticks();
			if(!mPaused)
			{
				mOldDeltaTicks = mDeltaTicks;
				mDeltaTicks = ticks - mOldTicks;
				mCurrentTicks += mDeltaTicks;
				mOldTicks = ticks;
			}
		}

		//////////////////////////////////////////////////////////////////////

		double Delta() const
		{
			return (double)mDeltaTicks / Frequency();
		}

		//////////////////////////////////////////////////////////////////////

		double WallTime() const
		{
			return (double)mCurrentTicks / Frequency();
		}

		//////////////////////////////////////////////////////////////////////

	protected:

		uint64 mOldTicks;		// last rdtsc
		uint64 mDeltaTicks;		// last difference (can't be paused)
		uint64 mOldDeltaTicks;	// repeat the last delta when unpausing
		uint64 mCurrentTicks;	// current tick count, might have been paused
		bool mPaused;
	};

	//////////////////////////////////////////////////////////////////////
}